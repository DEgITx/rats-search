name: rats
on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node_version:
          - 16
          - 22
        architecture:
          - x64
#          - arm64   # precompiled bits may not allow for this
        # an extra windows-x86 run:
#        include:
#          - os: windows-latest
#            node_version: 15
#            architecture: arm64
#          - os: macos-latest
#            node_version: 15
#            architecture: arm64

    name: Node ${{ matrix.node_version }} - ${{ matrix.architecture }} on ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DISPLAY: :0

    steps:
      - name: Setup xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb g++-multilib
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 &
        continue-on-error: true

      - name: Prepare python3.10 (macOS)
        if: runner.os == 'macOS'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        continue-on-error: true

      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          architecture: ${{ matrix.architecture }}

      # Add caching
      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node_version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing npm dependencies..."
          npm install --force
        continue-on-error: false

      - name: Run postinstall
        run: npm run postinstall
        continue-on-error: false

      - name: Run prebuild
        run: npm run prebuild
        continue-on-error: false

      - name: Run buildweb
        run: npm run buildweb
        continue-on-error: false

      - name: Run tests
        run: |
          echo "Running tests..."
          npm run test || {
            echo "Tests failed but continuing..."
            echo "::warning ::Tests failed but workflow will continue"
          }

      - name: Run build
        run: |
          echo "Running build..."
          npm run build || {
            echo "Build failed!"
            echo "::error ::Build process failed"
            exit 1
          }

      - name: Upload artifacts
        if: success() || failure()  # Upload artifacts even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}-node${{ matrix.node_version }}-${{ matrix.architecture }}
          path: dist/
          if-no-files-found: warn

      - name: Get branch name
        uses: nelonoel/branch-name@v1.0.1

      - name: Deploy release
        if: |
          matrix.node_version == 16 && 
          github.ref == 'refs/heads/master' && 
          runner.os == 'macOS' && 
          github.event.head_commit.message == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Deploying release..."
          npx semantic-release || {
            echo "Build failed!"
            echo "::error ::Release deployment failed"
            exit 1
          }
